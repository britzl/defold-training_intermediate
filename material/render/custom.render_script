function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.fsquad_pred = render.predicate({"fsquad"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    
    -- Post process options (updated via main.gui and sent to the render script on each update)
    self.pp_enabled = true
    self.pp_divider = 0.0
    self.pp_material = "grayscale"
    
    -- Create post process render target
    self.pp_rt = recreate_render_target(nil, "post_process")
    
    -- Time and animation data
    self.last_t = socket.gettime()
    self.anim = 0.0
end

function recreate_render_target(rt, id)
	if rt then
		render.delete_render_target(rt)
	end
	
	-- Create post process render target
    local rt_params = { [render.BUFFER_COLOR_BIT] = {
    						width = render.get_window_width(),
    						height = render.get_window_height(),
    						format = render.FORMAT_RGBA
    					 },
    					 [render.BUFFER_DEPTH_BIT] = {
    						width = render.get_window_width(),
    						height = render.get_window_height(),
    						format = render.FORMAT_DEPTH
					     },
					   }
    return render.render_target(id, rt_params)
end

-- Draw our scene to supplied render target "to_rt" (if available, otherwise render to backbuffer)
function draw_world(self, to_rt)
	if to_rt then
		render.enable_render_target(to_rt)
    	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
	end
	
	-- Setup camera, identity view mtx
	render.set_view(vmath.matrix4())

	-- Render sprites/tiles
	local hw = render.get_width() / 2
	local hh = render.get_height() / 2
	render.set_projection(vmath.matrix4_orthographic(-hw, hw, -hh, hh, -1, 1))
	
    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)
    
    render.draw(self.tile_pred)
    
    if to_rt then
    	render.disable_render_target(to_rt)
    end
end

-- Draw post process fullscreen quad, from supplied render target "from_rt"
function draw_post_process(self, from_rt)
	render.enable_texture(0, from_rt, render.BUFFER_COLOR_BIT)
	render.set_view(vmath.matrix4())
	render.set_projection(vmath.matrix4_orthographic(-1, 1, -1, 1, -1, 1))
	
	render.enable_material(self.pp_material)
	local constants = render.constant_buffer()
	constants.prop = vmath.vector4(self.pp_divider, 0.0, 0.0, 0.0)
	constants.anim = vmath.vector4(self.dt, self.anim, 0.0, 0.0)
	render.draw(self.fsquad_pred, {constants = constants})
	render.disable_texture(0, from_rt)
	render.disable_material()
end

function draw_gui(self)
	-- Render GUI and text
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)    
end

function update(self)
	-- Update delta time (not available in renderscripts by default, so we calculate it ourselves)
	local t = socket.gettime()
	self.dt = (t - self.last_t)
	self.anim = self.anim + self.dt
	self.last_t = t
	
	-- Clear backbuffer and setup viewport
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    
    if self.pp_enabled then
    	draw_world(self, self.pp_rt)
    	draw_post_process(self, self.pp_rt)
    else
    	draw_world(self)
    end
    draw_gui(self)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
    elseif message_id == hash("render_options") then
    	self.pp_enabled = message.pp_enabled
    	self.pp_divider = message.pp_divider
    	self.pp_material = message.pp_material
    elseif message_id == hash("window_resized") then
    	self.pp_rt = recreate_render_target(self.pp_rt, "post_process")
    end
    
    
end
